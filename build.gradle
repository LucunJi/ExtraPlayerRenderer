import groovy.json.JsonSlurper

plugins {
    id('fabric-loom').version('1.5-SNAPSHOT')
}

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

ext.configFile = file "build.properties"

// follow semantic versioning! https://semver.org/
def modJson = file(sourceSets.main.resources.srcDirs.first().path + '/fabric.mod.json')
def modSpec = new JsonSlurper().parseText(modJson.text)
archivesBaseName = modSpec.name
version = project.minecraft_version + "-" + modSpec.version
group = project.maven_group + "." + modSpec.id

repositories {
    maven { url 'https://masa.dy.fi/maven' }
    maven { url 'https://api.modrinth.com/maven' }
    maven { url 'https://jitpack.io' }
}

dependencies {
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

    //Fabric api
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
    modImplementation "fi.dy.masa.malilib:malilib-fabric-${project.malilib_minecraft_version}:${project.malilib_version}"
    modImplementation "maven.modrinth:modmenu:${project.mod_menu_version}"
}

processResources {
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"

    // Minecraft 1.18 upwards uses Java 17.
    it.options.release = 17
}

java {
    withSourcesJar()
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}" }
    }
}

gradle.projectsEvaluated {
    tasks.withType(JavaCompile) {
        options.compilerArgs << "-Xlint:deprecation"
    }
}

tasks.register('printToGitHubActions') {
    onlyIf { System.getenv().GITHUB_OUTPUT }
    doLast {
//        same as those in mc-publish
        FileWriter fw = new FileWriter(System.getenv().GITHUB_OUTPUT)
        fw.write("version=${project.version}\n")
        fw.write("game_versions=${project.minecraft_version}\n")
        fw.write("files=${remapJar.archiveFile.get().getAsFile().absolutePath}\n")
        fw.write("release_name=${modSpec.name} v${modSpec.version} for mc ${project.minecraft_version}\n")
        fw.close()
    }
}

tasks.build.finalizedBy(printToGitHubActions)
